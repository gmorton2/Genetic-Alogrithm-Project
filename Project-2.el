(setq data
      '(
       (1 (5 5 -53.5) 1)
       (2 (5 4 -18.8) 2)
       (3 (5 3 -6.9) 2)
       (4 (5 2 -15.6) 1)
       (5 (5 1 19.3) 3)
       (6 (5 0 0.0) 2)
       (7 (5 -1 -11.3) 1)
       (8 (5 -2 -0.4) 3)
       (9 (5 -3 -14.1) 1)
       (10 (5 -4 0.8) 3)
       (11 (5 -5 -12.5) 2)
       (12 (4 5 -22.0) 3)
       (13 (4 4 -14.2) 3)
       (14 (4 3 -7.8) 2)
       (15 (4 2 -4.6) 1)
       (16 (4 1 0.6) 2)
       (17 (4 0 0.0) 2)
       (18 (4 -1 6.8) 3)
       (19 (4 -2 11.2) 3)
       (20 (4 -3 -6.6) 2)
       (21 (4 -4 -6.4) 2)
       (22 (4 -5 -3.0) 2)
       (23 (3 5 -17.5) 3)
       (24 (3 4 -29.8) 1)
       (25 (3 3 -8.1) 2)
       (26 (3 2 -2.2) 2)
       (27 (3 1 0.1) 2)
       (28 (3 0 0.0) 2)
       (29 (3 -1 -1.3) 2)
       (30 (3 -2 5.3) 3)
       (31 (3 -3 -2.7) 2)
       (32 (3 -4 10.5) 3)
       (33 (3 -5 -10.5) 1)
       (34 (2 5 -28.0) 3)
       (35 (2 4 -17.6) 2)
       (36 (2 3 -7.8) 2)
       (37 (2 2 -2.4) 2)
       (38 (2 1 7.8) 3)
       (39 (2 0 -11.0) 1)
       (40 (2 -1 -15.6) 1)
       (41 (2 -2 -0.8) 2)
       (42 (2 -3 -1.4) 1)
       (43 (2 -4 15.8) 3)
       (44 (2 -5 13.0) 2)
       (45 (1 5 -29.5) 2)
       (46 (1 4 -10.6) 3)
       (47 (1 3 -8.9) 1)
       (48 (1 2 -2.2) 2)
       (49 (1 1 -0.3) 2)
       (50 (1 0 10.0) 3)
       (51 (1 -1 -0.1) 2)
       (52 (1 -2 0.6) 2)
       (53 (1 -3 3.3) 2)
       (54 (1 -4 -3.7) 1)
       (55 (1 -5 34.5) 3)
       (56 (0 5 -30.0) 1)
       (57 (0 4 -6.8) 3)
       (58 (0 3 13.6) 3)
       (59 (0 2 12.4) 3)
       (60 (0 1 -0.2) 2)
       (61 (0 0 0.0) 2)
       (62 (0 -1 0.2) 2)
       (63 (0 -2 -5.4) 1)
       (64 (0 -3 5.4) 2)
       (65 (0 -4 12.8) 2)
       (66 (0 -5 25.0) 2)
       (67 (-1 5 -19.5) 2)
       (68 (-1 4 -23.2) 1)
       (69 (-1 3 -3.3) 2)
       (70 (-1 2 -0.6) 2)
       (71 (-1 1 0.1) 2)
       (72 (-1 0 9.0) 3)
       (73 (-1 -1 -1.7) 1)
       (74 (-1 -2 19.2) 3)
       (75 (-1 -3 6.9) 2)
       (76 (-1 -4 15.6) 2)
       (77 (-1 -5 29.5) 2)
       (78 (-2 5 -9.0) 3)
       (79 (-2 4 -4.8) 2)
       (80 (-2 3 -16.6) 1)
       (81 (-2 2 0.8) 2)
       (82 (-2 1 -13.4) 1)
       (83 (-2 0 0.0) 2)
       (84 (-2 -1 0.2) 2)
       (85 (-2 -2 -2.5) 1)
       (86 (-2 -3 18.8) 3)
       (87 (-2 -4 17.6) 2)
       (88 (-2 -5 25.0) 1)
       (89 (-3 5 -5.4) 2)
       (90 (-3 4 0.4) 2)
       (91 (-3 3 2.7) 2)
       (92 (-3 2 6.6) 3)
       (93 (-3 1 13.3) 3)
       (94 (-3 0 -4.0) 1)
       (95 (-3 -1 -0.1) 2)
       (96 (-3 -2 -13.8) 1)
       (97 (-3 -3 25.1) 3)
       (98 (-3 -4 18.8) 2)
       (99 (-3 -5 35.5) 2)
       (100 (-4 5 -2.0) 1)
       (101 (-4 4 1.4) 1)
       (102 (-4 3 6.6) 2)
       (103 (-4 2 -9.2) 1)
       (104 (-4 1 2.2) 2)
       (105 (-4 0 -8.0) 1)
       (106 (-4 -1 14.4) 3)
       (107 (-4 -2 7.6) 3)
       (108 (-4 -3 -4.1) 1)
       (109 (-4 -4 19.2) 2)
       (110 (-4 -5 24.0) 1)
       (111 (-5 5 23.5) 3)
       (112 (-5 4 13.2) 2)
       (113 (-5 3 1.0) 1)
       (114 (-5 2 7.4) 2)
       (115 (-5 1 19.3) 3)
       (116 (-5 0 -18.0) 1)
       (117 (-5 -1 10.7) 3)
       (118 (-5 -2 0.6) 2)
       (119 (-5 -3 6.9) 2)
       (120 (-5 -4 18.8) 2)
       (121 (-5 -5 35.5) 1)))

(setq test
      '((201 (4.5 4.5 -27.3) 2)
	(202 (4.5 3.5 -12.5) 2)
	(203 (4.5 2.5 6.3) 3)
	(204 (4.5 1.5 17.3) 3)
	(205 (4.5 0.5 -5.2) 1)
	(206 (4.5 -0.5 -1.2) 2)
	(207 (4.5 -1.5 11.6) 3)
	(208 (4.5 -2.5 -24.6) 1)
	(209 (4.5 -3.5 -17.5) 1)
	(210 (4.5 -4.5 -1.1) 3)
	(211 (3.5 4.5 -33.9) 1)
	(212 (3.5 3.5 -5.9) 3)
	(213 (3.5 2.5 -6.4) 1)
	(214 (3.5 1.5 14.6) 3)
	(215 (3.5 0.5 16.4) 3)
	(216 (3.5 -0.5 2.2) 3)
	(217 (3.5 -1.5 -2.7) 2)
	(218 (3.5 -2.5 2.7) 3)
	(219 (3.5 -3.5 -4.3) 2)
	(220 (3.5 -4.5 10.5) 3)
	(221 (2.5 4.5 -32.5) 1)
	(222 (2.5 3.5 -20.5) 1)
	(223 (2.5 2.5 4.3) 3)
	(224 (2.5 1.5 -0.9) 2)
	(225 (2.5 0.5 0.2) 2)
	(226 (2.5 -0.5 11.6) 3)
	(227 (2.5 -1.5 15.6) 3)
	(228 (2.5 -2.5 -14.6) 1)
	(229 (2.5 -3.5 14.3) 3)
	(230 (2.5 -4.5 -8.7) 1)
	(231 (1.5 4.5 -18.3) 3)
	(232 (1.5 3.5 -11.5) 2)
	(233 (1.5 2.5 -4.4) 2)
	(234 (1.5 1.5 -1.0) 2)
	(235 (1.5 0.5 9.0) 3)
	(236 (1.5 -0.5 -11.2) 1)
	(237 (1.5 -1.5 17.7) 3)
	(238 (1.5 -2.5 -7.3) 1)
	(239 (1.5 -3.5 6.1) 3)
	(240 (1.5 -4.5 20.1) 3)
	(241 (0.5 4.5 -27.1) 1)
	(242 (0.5 3.5 -17.7) 1)
	(243 (0.5 2.5 -19.7) 1)
	(244 (0.5 1.5 -9.9) 1)
	(245 (0.5 0.5 -15.0) 1)
	(246 (0.5 -0.5 13.0) 3)
	(247 (0.5 -1.5 -5.6) 1)
	(248 (0.5 -2.5 5.4) 3)
	(249 (0.5 -3.5 7.3) 2)
	(250 (0.5 -4.5 20.1) 3)
	(251 (-0.5 4.5 -16.1) 2)
	(252 (-0.5 3.5 -21.3) 1)
	(253 (-0.5 2.5 14.6) 3)
	(254 (-0.5 1.5 -0.4) 2)
	(255 (-0.5 0.5 0.0) 2)
	(256 (-0.5 -0.5 11.0) 3)
	(257 (-0.5 -1.5 0.9) 2)
	(258 (-0.5 -2.5 -3.3) 1)
	(259 (-0.5 -3.5 7.7) 1)
	(260 (-0.5 -4.5 20.1) 2)
	(261 (-1.5 4.5 -11.1) 2)
	(262 (-1.5 3.5 -23.1) 1)
	(263 (-1.5 2.5 8.3) 3)
	(264 (-1.5 1.5 14.3) 3)
	(265 (-1.5 0.5 0.2) 2)
	(266 (-1.5 -0.5 0.0) 2)
	(267 (-1.5 -1.5 -3.0) 1)
	(268 (-1.5 -2.5 -5.6) 1)
	(269 (-1.5 -3.5 23.5) 3)
	(270 (-1.5 -4.5 6.3) 1)
	(271 (-2.5 4.5 -8.3) 1)
	(272 (-2.5 3.5 -6.3) 1)
	(273 (-2.5 2.5 1.6) 2)
	(274 (-2.5 1.5 20.4) 3)
	(275 (-2.5 0.5 0.4) 2)
	(276 (-2.5 -0.5 7.8) 3)
	(277 (-2.5 -1.5 0.9) 2)
	(278 (-2.5 -2.5 -8.3) 1)
	(279 (-2.5 -3.5 22.5) 3)
	(280 (-2.5 -4.5 17.5) 1)
	(281 (-3.5 4.5 -5.5) 1)
	(282 (-3.5 3.5 -0.7) 1)
	(283 (-3.5 2.5 19.3) 3)
	(284 (-3.5 1.5 -16.3) 1)
	(285 (-3.5 0.5 10.8) 3)
	(286 (-3.5 -0.5 6.6) 3)
	(287 (-3.5 -1.5 11.4) 3)
	(288 (-3.5 -2.5 4.4) 2)
	(289 (-3.5 -3.5 19.9) 3)
	(290 (-3.5 -4.5 10.9) 1)
	(291 (-4.5 4.5 4.1) 1)
	(292 (-4.5 3.5 -4.5) 1)
	(293 (-4.5 2.5 -9.4) 1)
	(294 (-4.5 1.5 4.4) 2)
	(295 (-4.5 0.5 -8.8) 1)
	(296 (-4.5 -0.5 6.2) 3)
	(297 (-4.5 -1.5 3.7) 3)
	(298 (-4.5 -2.5 3.7) 2)
	(299 (-4.5 -3.5 12.5) 2)
	(300 (-4.5 -4.5 41.3) 3)
	(301 (4.3 4.3 -9.9) 3)
	(302 (4.3 3.3 -10.5) 2)
	(303 (4.3 2.3 -2.7) 2)
	(304 (4.3 1.3 -15.5) 1)
	(305 (4.3 0.3 0.5) 2)
	(306 (4.3 -0.7 12.4) 3)
	(307 (4.3 -1.7 -4.6) 2)
	(308 (4.3 -2.7 -7.3) 2)
	(309 (4.3 -3.7 -8.5) 2)
	(310 (4.3 -4.7 10.1) 3)
	(311 (3.3 4.3 -23.4) 2)
	(312 (3.3 3.3 -7.8) 3)
	(313 (3.3 2.3 -3.4) 2)
	(314 (3.3 1.3 -13.1) 1)
	(315 (3.3 0.3 0.3) 2)
	(316 (3.3 -0.7 14.0) 3)
	(317 (3.3 -1.7 2.2) 3)
	(318 (3.3 -2.7 -21.8) 1)
	(319 (3.3 -3.7 10.1) 3)
	(320 (3.3 -4.7 1.1) 2)
	(321 (2.3 4.3 -22.1) 2)
	(322 (2.3 3.3 -10.5) 2)
	(323 (2.3 2.3 -6.7) 1)
	(324 (2.3 1.3 -17.5) 1)
	(325 (2.3 0.3 0.1) 2)
	(326 (2.3 -0.7 -0.5) 2)
	(327 (2.3 -1.7 -8.2) 1)
	(328 (2.3 -2.7 7.2) 3)
	(329 (2.3 -3.7 18.9) 3)
	(330 (2.3 -4.7 12.1) 3)
	(331 (1.3 4.3 -20.0) 2)
	(332 (1.3 3.3 -9.5) 2)
	(333 (1.3 2.3 -3.4) 2)
	(334 (1.3 1.3 5.3) 3)
	(335 (1.3 0.3 0.0) 2)
	(336 (1.3 -0.7 13.8) 3)
	(337 (1.3 -1.7 -0.1) 2)
	(338 (1.3 -2.7 1.6) 2)
	(339 (1.3 -3.7 5.9) 2)
	(340 (1.3 -4.7 14.2) 2)
	(341 (0.3 4.3 -21.0) 1)
	(342 (0.3 3.3 8.2) 3)
	(343 (0.3 2.3 10.3) 3)
	(344 (0.3 1.3 4.5) 3)
	(345 (0.3 0.3 0.0) 2)
	(346 (0.3 -0.7 -17.0) 1)
	(347 (0.3 -1.7 0.8) 2)
	(348 (0.3 -2.7 3.5) 2)
	(349 (0.3 -3.7 9.3) 2)
	(350 (0.3 -4.7 3.4) 1)
	(351 (-0.7 4.3 -13.1) 2)
	(352 (-0.7 3.3 -5.5) 2)
	(353 (-0.7 2.3 -1.6) 2)
	(354 (-0.7 1.3 -10.1) 1)
	(355 (-0.7 0.3 18.0) 3)
	(356 (-0.7 -0.7 -2.9) 1)
	(357 (-0.7 -1.7 1.3) 2)
	(358 (-0.7 -2.7 20.8) 3)
	(359 (-0.7 -3.7 11.9) 2)
	(360 (-0.7 -4.7 18.6) 1)
	(361 (-1.7 4.3 -22.4) 1)
	(362 (-1.7 3.3 -2.5) 2)
	(363 (-1.7 2.3 0.0) 2)
	(364 (-1.7 1.3 -4.5) 1)
	(365 (-1.7 0.3 0.1) 2)
	(366 (-1.7 -0.7 -9.0) 1)
	(367 (-1.7 -1.7 17.5) 3)
	(368 (-1.7 -2.7 24.6) 3)
	(369 (-1.7 -3.7 11.7) 1)
	(370 (-1.7 -4.7 7.9) 1)
	(371 (-2.7 4.3 15.2) 3)
	(372 (-2.7 3.3 8.1) 3)
	(373 (-2.7 2.3 2.1) 2)
	(374 (-2.7 1.3 -7.6) 1)
	(375 (-2.7 0.3 5.3) 3)
	(376 (-2.7 -0.7 -18.2) 1)
	(377 (-2.7 -1.7 1.3) 2)
	(378 (-2.7 -2.7 11.9) 3)
	(379 (-2.7 -3.7 14.8) 2)
	(380 (-2.7 -4.7 23.3) 1)
	(381 (-3.7 4.3 3.7) 2)
	(382 (-3.7 3.3 5.4) 2)
	(383 (-3.7 2.3 4.6) 2)
	(384 (-3.7 1.3 21.6) 3)
	(385 (-3.7 0.3 12.5) 3)
	(386 (-3.7 -0.7 1.5) 3)
	(387 (-3.7 -1.7 0.8) 2)
	(388 (-3.7 -2.7 16.6) 3)
	(389 (-3.7 -3.7 15.2) 2)
	(390 (-3.7 -4.7 30.7) 2)
	(391 (-4.7 4.3 17.0) 3)
	(392 (-4.7 3.3 10.3) 2)
	(393 (-4.7 2.3 7.6) 2)
	(394 (-4.7 1.3 -8.0) 1)
	(395 (-4.7 0.3 -17.3) 1)
	(396 (-4.7 -0.7 -1.0) 2)
	(397 (-4.7 -1.7 -0.1) 2)
	(398 (-4.7 -2.7 -4.2) 1)
	(399 (-4.7 -3.7 12.8) 1)
	(400 (-4.7 -4.7 36.1) 3)))
;; ------------------------------------------------------------
(require 'cl-lib) ;; for cl-incf
;;----------------------------------------------------- run-critter ----
;; EX
;; :raw-wgts '(1 2 3 4 5 6 7 8 9 10 11 12) ;; H-vec layer has 2 nodes.
;; :easy-wgts structured as pairs in two parts: H-vec-in-wgts and Y-vec-in-wgts
;; (((:h-in (1 2 3)) (:h-in (7 8 9))) ;; A link from each X-node.
;; ((:y1-in (4 10)) (:y2-in (5 11)) (:y3-in (6 12)))) ;; A link from each H-node.
;;
;; We need to run a critter as an ANN with input X vec.
;; Critter format like ((:crit <id>) (:fitness <distsum>) (:wgts 1 2 3 ... ))
;; Wgts count s/b a multiple of 6 (ie, 3*H for X->H nodes, & 3* for H->Y).
;; NB, Wgts sorted by H-node, first 3 in-wgts then 3 out-wgts; 6 wgts/H-node.
;;

;;run-critter -> 3d-class-estim ->
;;calc-dist-to-real-3d-class ->
;;gotten from x-vec's class number -->
;;that dist is x-vec's contribution to critter's fitness -->
;;need to add in rest of input vector's distances
;;need 3d-class-dist for each x-vec run thru the critter
;;add all those dists together
;;that sum is the critter's fitness
;;x-vec has a real class int
;;sample #2 = (2 (4.2 3.1 17) 3)
;;sample #2's class num = 3
;;it's 3d-class-vec = (0 0 1)

(defun run-critter (rx-vec rcritter)
  "Return the critter's output Y-vec given the input X-vec; X&Y in 3D."
  (let* ((raw-wgts (get-critter-wgts rcritter))
	 (zwgts (make-easy-crit-wgts raw-wgts)) ;; "z" for easy.
	 (zh-wgts (car zwgts))
	 (zy-wgts (cadr zwgts))
	 (h-vec (calc-h-vec rx-vec zh-wgts)))
    ;;(print (list :h-wgts zh-wgts :y-wgts zy-wgts :h-vec h-vec))
    (calc-yj-out rx-vec zh-wgts zy-wgts)))

;; (run-critter '(4 2.5 16.7)
;; 	     '(1 2 3 4 5 6 7 8 9 10))
;; (0.5 0.5 0.5)


;; (:h-wgts ((:h-in (1 2 3)) (:h-in (7 8 9)) (:h-in (13 14 15))) :y-wgts ((:y1-in (4 10 16)) (:y2-in (5 11 17)) (:y3-in (6 12 18))) :h-vec (1.0 1.0 1.0))
;; (0.9999999999999065 0.9999999999999953 0.9999999999999998)

;;test the classifier
;; (run-critter '(4.5 4.5 -27.3)
;; 	     '((:crit crit-2624) (:fitness 64.15894834390909)
;; 	       (:wgts (3.0983 2.21 -9.993 2.3200000000000003 -2.77 -4.1899999999999995 2.8600000000000003 0.45999999999999996 0.9299999999999997 -4.67 4.4399999999999995 -4.1899999999999995 -2.39 -9.993 10.982 -1.77 2.6900000000000004 -3.27 1.3499999999999996 -2.23 4.000983 -9.993 10.982 -4.83 4.000983 7.4093893 1.5700000000000003 -4.67 4.4399999999999995 -33.09282 3.9873 7.4093893 4.000983 -9.993 10.982 -0.373262))))
;; (0.087131639671594 0.8414707867739336 6.474259613034394e-17)

(defun get-num-of-win-lose (test-set rcritter)
  "returns the number of wins in the test set given the tested classifier"
  (let* ((num-win 0)
	 (num-lose 0))
    (while test-set
      (let* ((test-sample (pop test-set))
	     (sample-x (get-critter-fm-sample-x test-sample))
	     (class-num (get-class-num test-sample))
	     (classifier-3d-vec (run-critter sample-x rcritter))
	     (max-idx (get-max-fm-3d-vec classifier-3d-vec)))
	(if (= max-idx class-num)
	    (setq num-win (+ 1 num-win)))))
    num-win))
	
	
;; (get-num-of-win-lose test '((:crit crit-9136) (:fitness 62.32097986156463) (:wgts (-0.373262 -4.3 8.90781 -21 -2.098 -4.56 3.9873 9.09112 1.71 -9.993 10.982 -2.62 0.33999999999999986 1.2199999999999998 -21 4.550000000000001 -0.373262 -3.05 0.3200000000000003 -3.35 4.000983 -1.37 10.982 -3.08 -2.94 3.4700000000000006 -21 -1.19 -3.1 -4.94 4.83 0.2699999999999996 2.5599999999999996 -9.993 10.982 -4.94))))

;; 107

(defun get-max-fm-3d-vec (classifier-3d-vec)
  "Returns the max number's index in a 3d-vector"
  (let* ((max -100)
	 (count 1)
	 (pos 0))
    (while classifier-3d-vec
      (let* ((1D (pop classifier-3d-vec)))
	(if (< max 1D)
	    (progn
	      (setq max 1D
		    pos count)
	      (setq count (+ 1 count))))))
    pos))

;; (get-max-fm-3d-vec '(0.087131639671594 0.8414707867739336 6.474259613034394e-17))
;; 2

;; untested.
;;---------------------------------------------- make-easy-crit-wgts ----
;;
(defun make-easy-crit-wgts (rwgts) ;; Transform wgts layout, add keywords.
  "Return critter wgts grouped for easy ANN node-input swixie use.
 EX: Input = (1 2 3 4 5 6 7 8 9 10 11 12))
 NB, sorted by H-node, first 3 in-wgts then 3 out-wgts; 6 wgts/H-node.
 Output = (((:h-in (1 2 3)) (:h-in (7 8 9)))
 ((:y1-in (4 10)) (:y2-in (5 11)) (:y3-in (6 12))))
 NB, structured as pairs in two parts: H-vec-in-wgts and Y-vec-in-wgts"
  (let ((h-ins-rev nil)
	(y1-in-rev nil)
	(y2-in-rev nil)
	(y3-in-rev nil))
    (while rwgts
      (let ((w1 (pop rwgts))
	    (w2 (pop rwgts))
	    (w3 (pop rwgts))
	    (w4 (pop rwgts))
	    (w5 (pop rwgts))
	    (w6 (pop rwgts)))
	(push (list :h-in (list w1 w2 w3))
	      h-ins-rev)
	(push w4 y1-in-rev)
	(push w5 y2-in-rev)
	(push w6 y3-in-rev)))
    (list
     (reverse h-ins-rev)
     (list
      (list :y1-in (reverse y1-in-rev))
      (list :y2-in (reverse y2-in-rev))
      (list :y3-in (reverse y3-in-rev))))))
;; tests
;; (make-easy-wgts '(1 2 3 4 5 6 7 8 9 10 11 12))
;; (((:h-in (1 2 3)) (:h-in (7 8 9)))
;; ((:y1-in (4 10)) (:y2-in (5 11)) (:y3-in (6 12))))
;; (make-easy-wgts '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))
;; (((:h-in (1 2 3)) (:h-in (7 8 9)) (:h-in (13 14 15)))
;; ((:y1-in (4 10 16)) (:y2-in (5 11 17)) (:y3-in (6 12 18))))
;;----------------------------------------------------- calc-h-vec ----
;; EX
;; :rx-vec = (4 2.5 16.7)
;; :rzh-wgt-pairs = ((:h-in (1 2 3)) (:h-in (7 8 9)) (:h-in (13 14 15)))
;;
(defun calc-h-vec (rx-vec rzh-wgt-pairs)
  "Return H vec layer outputs given X inputs and X-to-H wgt-pairs."
  (let ((h-vec-rev nil))
    (while rzh-wgt-pairs
      (let* ((zhj-in-pair (pop rzh-wgt-pairs))
	     (hj-in-wgts (get-h-in-wgts-fm-pair zhj-in-pair))
	     (hj-swixie (calc-swixie rx-vec hj-in-wgts)))
	(push (calc-hj-out hj-swixie)
	      h-vec-rev)))
    (reverse h-vec-rev)))

;; (calc-h-vec '(4 2.5 16.7)
;; 	    '((:h-in (1 2 3)) (:h-in (7 8 9)) (:h-in (13 14 15))))

;; (:hjpair (:h-in (1 2 3)) :wgts (1 2 3) :swixie 59.099999999999994)

;; (:hjpair (:h-in (7 8 9)) :wgts (7 8 9) :swixie 198.29999999999998)

;; (:hjpair (:h-in (13 14 15)) :wgts (13 14 15) :swixie 337.5)
;; (1.0 1.0 1.0)


;; untested.
;;------------------------------------------- get-h-in-wgts-fm-pair ----
;; :EX
;; :rzh-in-pair = (:h-in (1 2 3))
;;
(defun get-h-in-wgts-fm-pair (rzh-in-pair)
  "returns the list of h-in weights"
  (cadr rzh-in-pair))

;; (get-h-in-wgts-fm-pair '(:h-in (1 2 3)))
;; (1 2 3)

;; untested.
;;----------------------------------------------------- calc-swixie ----
;;
(defun calc-swixie (rA-vec rB-vec)
  "Return dot-product of vectors A and B."
  (let ((retv 0))
    (dotimes (i (length rA-vec))
      (setq retv (+ (* (elt rA-vec i) (elt rB-vec i)) retv)))
    retv))

;; Test
;; (calc-swixie '(1 2 3)
;; 	     '(-3 10 -30))
;; -73

;;----------------------------------------------------- calc-hj-out ----
(defun calc-hj-out (rhj-swixie)
  "Return Transfer fcn of the Swixie."
  (let* ((ee-base 2.718281828)
	 (retv 0)
	 (e-to-exp (expt ee-base (- 0 rhj-swixie)))
	 (retv (/ 1 (+ 1 e-to-exp))))
    retv))

;; (calc-hj-out 
;;  (calc-swixie '(1 2 3)
;;  	     '(-3 10 -30)))
;; 1.9792599023467335e-32

(defun get-y-in-wgts-fm-pair (rzy-in-pair)
  "returns the list of y(x)-in weights"
  (cadr rzy-in-pair))

;; (get-y-in-wgts-fm-pair '((:y1-in (4 6 16)) (:y2-in (5 6 7))))
;; (4 6 16)

(defun calc-yj-out (rx-vec rzh-wgt-pairs rzy-wgt-pairs)
  "calculates the h-vector"
  (let ((h-vec (calc-h-vec rx-vec rzh-wgt-pairs)))
    (let ((y-out-vec (calc-h-vec h-vec rzy-wgt-pairs)))
	      y-out-vec)))

;; (calc-yj-out
;; 	  '(4 2.5 16.7)
;; 	  '((:h-in (1 2 3)) (:h-in (7 8 9)) (:h-in (13 14 15)))
;; 	  '((:y1-in (4 10 16)) (:y2-in (5 11 17)) (:y3-in (6 12 18))))

;; (0.9999999999999065 0.9999999999999953 0.9999999999999998)

;;----------------------------------------------------- calc-y-vec ----
(defun calc-y-vec (rh-vec rzy-wgt-pairs)
  "Return Y vec layer outputs given H vec outputs and H-to-Y wgt-pairs."
  (let ((y-vec-rev nil))
    (while rzy-wgt-pairs
      (let* ((zyj-in-pair (pop rzy-wgt-pairs))
	     (yj-in-wgts (get-y-in-wgts-fm-pair zyj-in-pair)) ;; need to make get-y-in-wgts-fm-pair (is this just a simple cadr?)
	     (yj-swixie (calc-swixie rh-vec yj-in-wgts)))
	(print (list :yjpair zyj-in-pair :wgts yj-in-wgts :swixie yj-swixie))
	(push (calc-yj-out yj-swixie) ;; need to make calc-yj-out (do you calculate this the same way you calc h-out?)
	      h-vec-rev)))
    (reverse y-vec-rev)))

;; (calc-y-vec '(calc-h-vec '(4 2.5 16.7)
;; 			 '((:h-in (1 2 3)) (:h-in (7 8 9)) (:h-in (13 14 15))))
;; 	    '((:y1-in (4 10 16)) (:y2-in (5 11 17)) (:y3-in (6 12 18))))

;;----------------------------------------------------- get-dist-twx-2-vecs ----
;; Find "unfitness", dist( C, Y ); C = Input vector's correct class, Y = Output layer's guess for correct class.
;; NB, Y output is “percentages” – Logistic fcn output is in [0..1].
;;
(defun get-dist-twx-2-vecs (rveca rvecb)
 "Euclidean dist."
 (let ((dx2 0)
       (len (length rveca)))
   (while (and rveca rvecb)
     (let* ((ax (pop rveca))
	    (bx (pop rvecb))
	    (diff (abs (- ax bx))))
       (setq dx2 (+ dx2 (* diff diff)))))
   (sqrt dx2)))
;; tests
;; (get-dist-twx-2-vecs '(0 1 0) '(0.3 0.7 0.5)) ;; X-vec class = 2; Y-vec matches
;; 0.6557438524302001
;; (get-dist-twx-2-vecs '(0 1 0) '(0.7 0.3 0.5)) ;; X-vec class = 2; Y-vec mis-match
;; 1.1090536506409416
;;----------------------------------------------------- ga-doit ----
;; For Stopping, pick a generation count, say G = 100.
;;
(defun ga-doit (rgen-max rgen-1) ;; rgen-max used for “done”
 "Run GA generations for given maximum count from given gen #1.
 Given gen must have fitness for each critter."
 (let ((gen-cnt rgen-max)
       (gen rgen-1)
       (gen-num 0))
   (while (< 0 gen-cnt)
     (cl-decf gen-cnt) ;; Advance.
     (setq gen (ga-do-gen gen))
     (setq gen-num (+ 1 gen-num))
     (print (list :generation gen-num))
     (do-gen-stats gen))))

;; (ga-doit 100 '((:critters (((:crit crit-466)(:fitness 444.565) (:wgts (.23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01 .23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01)))
;; 			 ((:crit crit-467) (:fitness 204.5948) (:wgts (12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201 12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201)))
;; 			 ((:crit crit-468) (:fitness 201.456) (:wgts (-0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982 -0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982)))
;; 			 ((:crit crit-469) (:fitness 250) (:wgts (.092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111 .092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111)))
;; 			 ((:crit crit-466)(:fitness 444.565) (:wgts (.23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01 .23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01)))
;; 			 ((:crit crit-467) (:fitness 204.5948) (:wgts (12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201 12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201)))
;; 			 ((:crit crit-468) (:fitness 201.456) (:wgts (-0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982 -0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982)))
;; 			 ((:crit crit-469) (:fitness 250) (:wgts (.092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111 .092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111)))((:crit crit-466)(:fitness 444.565) (:wgts (.23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01 .23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01)))
;; 			 ((:crit crit-467) (:fitness 204.5948) (:wgts (12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201 12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201)))
;; 			 ((:crit crit-468) (:fitness 201.456) (:wgts (-0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982 -0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982)))
;; 			 ((:crit crit-469) (:fitness 250) (:wgts (.092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111 .092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111)))((:crit crit-466)(:fitness 444.565) (:wgts (.23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01 .23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01)))
;; 			 ((:crit crit-467) (:fitness 204.5948) (:wgts (12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201 12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201)))
;; 			 ((:crit crit-468) (:fitness 201.456) (:wgts (-0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982 -0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982)))
;; 			 ((:crit crit-469) (:fitness 250) (:wgts (.092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111 .092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111)))
;; 			 ((:crit crit-466)(:fitness 444.565) (:wgts (.23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01 .23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01)))
;; 			 ((:crit crit-467) (:fitness 204.5948) (:wgts (12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201 12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201)))
;; 			 ((:crit crit-468) (:fitness 201.456) (:wgts (-0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982 -0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982)))
;; 			 ((:crit crit-469) (:fitness 250) (:wgts (.092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111 .092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111)))
;; 			 ((:crit crit-466)(:fitness 444.565) (:wgts (.23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01 .23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01)))
;; 			 ((:crit crit-467) (:fitness 204.5948) (:wgts (12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201 12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201)))
;; 			 ((:crit crit-468) (:fitness 201.456) (:wgts (-0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982 -0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982)))
;; 			 ((:crit crit-469) (:fitness 250) (:wgts (.092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111 .092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111)))
;; 			 ((:crit crit-466)(:fitness 444.565) (:wgts (.23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01 .23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01)))
;; 			 ((:crit crit-467) (:fitness 204.5948) (:wgts (12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201 12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201)))
;; 			 ((:crit crit-468) (:fitness 201.456) (:wgts (-0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982 -0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982)))
;; 			 ((:crit crit-469) (:fitness 250) (:wgts (.092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111 .092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111)))
;; 			 ((:crit crit-466)(:fitness 444.565) (:wgts (.23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01 .23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01)))
;; 			 ((:crit crit-467) (:fitness 204.5948) (:wgts (12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201 12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201)))
;; 			 ((:crit crit-468) (:fitness 201.456) (:wgts (-0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982 -0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982)))
;; 			 ((:crit crit-469) (:fitness 250) (:wgts (.092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111 .092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111)))
;; 			 ((:crit crit-466)(:fitness 444.565) (:wgts (.23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01 .23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01)))
;; 			 ((:crit crit-467) (:fitness 204.5948) (:wgts (12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201 12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201)))
;; 			 ((:crit crit-468) (:fitness 201.456) (:wgts (-0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982 -0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982)))
;; 			 ((:crit crit-469) (:fitness 250) (:wgts (.092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111 .092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111)))
;; 			 ((:crit crit-466)(:fitness 444.565) (:wgts (.23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01 .23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01)))
;; 			 ((:crit crit-467) (:fitness 204.5948) (:wgts (12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201 12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201)))
;; 			 ((:crit crit-468) (:fitness 201.456) (:wgts (-0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982 -0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982)))
;; 			 ((:crit crit-469) (:fitness 250) (:wgts (.092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111 .092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111)))
;; 			 ((:crit crit-466)(:fitness 444.565) (:wgts (.23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01 .23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01)))
;; 			 ((:crit crit-467) (:fitness 204.5948) (:wgts (12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201 12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201)))
;; 			 ((:crit crit-468) (:fitness 201.456) (:wgts (-0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982 -0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982)))
;; 			 ((:crit crit-469) (:fitness 250) (:wgts (.092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111 .092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111)))
;; 			 ((:crit crit-466)(:fitness 444.565) (:wgts (.23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01 .23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01)))
;; 			 ((:crit crit-467) (:fitness 204.5948) (:wgts (12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201 12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201)))
;; 			 ((:crit crit-468) (:fitness 201.456) (:wgts (-0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982 -0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982)))
;; 			 ((:crit crit-469) (:fitness 250) (:wgts (.092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111 .092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111)))
;; 			 ((:crit crit-466)(:fitness 444.565) (:wgts (.23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01 .23 1.567 -9.809 4 -3.5 12.1 -2.222 5.765 10.023 2.56 33.543 98.543 -1.2095 0.2234 6.0102 3.0983 9.567 10.01)))
;; 			 ((:crit crit-467) (:fitness 204.5948) (:wgts (12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201 12.231 1.56567 22.8309 4.54 6.578 -0.1223 4.909387 13.765 3.065234 12.5766 9.154 25.53423 -17.983672 0.2234 -33.09282 3.0983 19.5367 1.201)))
;; 			 ((:crit crit-468) (:fitness 201.456) (:wgts (-0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982 -0.373262 2.39232 8.90781 -21 -2.098 -3.1 3.9873 7.4093893 9.49204 -2.00056 6.9082 5.5555 -1.912162 -0.11526 9.09112 4.000983 -9.993 10.982)))
;; 			 ((:crit crit-469) (:fitness 250) (:wgts (.092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111 .092812 -1.111123 6.89172 2.00001 -3.625215 -33.0391 4.4444 7.77789 -9.560623 0.70956 12.49873 21.555473 -1.2065495 -0.2132234 7.08102 1.3094983 -9.0 3.111)))))))


(defun do-gen-stats (gen)
  "Prints the best new & old kid fittnesses"
  (print (car gen))
  (print (cadr gen)))
;;----------------------------------------------------- ga-do-gen ----
;; Assumes incoming gen of critters have their fitness. CF Lect 210318
;; o1. Fit:(set it for kids) Calc Fitness for each critter in sample/population
;; (remember who is best & by how much)
;; o2. Score: Select winners/parents and losers/purge
;; o3. Mate: Winners mate to create offspring (via crossover & mutation)
;; – careful of getting legal critters
;; o4. Purge: Losers are deleted from population
;; o5. Add: Kids are added to population (Winners still there)
;; o6A. OBE If stagnating: maybe create a few new random kids
;; (serious hyper-jumps) to replace low-fit critters
;; o6B. N/A Stop: Repeat it all until done criteria
;; (eg, within epsilon of expected optimum), after “X generations”
;; o- N/A Goal: Find best (optimal) fitness critter for problem

(defun ga-do-gen (rgen)
 "Return the next generation of critters, fitted."
 (let* ((fitted-kid-crits nil)
	(old-critters (get-critters rgen))
	(best-oldie-fit (get-max-fit old-critters)) ;; for gen stats, output later
	(winners-losers (split-crits-by-win-lose old-critters)) ;; Score: get a 2-elt list of lists
	(winner-crits (get-winner-crits winners-losers)) ;; get winners (eg Car)
	(loser-crits (get-loser-crits winners-losers)) ;; get losers (eg Cadr)
	(kid-crits (mate-crits winner-crits)) ;; Mate:
	(fitted-kid-crits (append (add-tot-fit-to-crits kid-crits data) fitted-kid-crits))
	(best-kid-fit (get-max-fit fitted-kid-crits)) ;; for gen stats, output later
	(new-gen-crits (append winner-crits fitted-kid-crits)) ;; Purge: & Add:
	(new-gen
	 (list (list :best-old-fit best-oldie-fit)
	       (list :best-kid-fit best-kid-fit)
	       (list :critters new-gen-crits))))
   new-gen))

;; (ga-do-gen '((:critters (((:crit crit-466)(:fitness 4.565) (:wgts (4 2 -0.7000000000000002 3 4 5)))
;; 			 ((:crit crit-467) (:fitness 67.76) (:wgts (5 -0.16999999999999993 1 10 .032 4)))
;; 			 ((:crit crit-468) (:fitness 107.34) (:wgts (-0.16999999999999993 11 12 1.34 5 6)))
;; 			 ((:crit crit-469) (:fitness 87.456) (:wgts (8 9 -3.4699999999999998 1 2 .03)))))))

;; (:new-gen
;;  ((:best-old-fit ((:crit crit-468) (:fitness 107.34) (:wgts (-0.16999999999999993 11 12 1.34 5 6))))
  
;;   (:best-kid-fit ((:fitness 104.78907385791692) ((:crit crit-137) (:wgts (-0.16999999999999993 11 12 1.34 -2.63 0.03)))
;; 		  ((:crit crit-138) (:wgts (-0.9000000000000004 8 9 -3.4699999999999998 1 2)))))
  
;;   (:critters (((:crit crit-468) (:fitness 107.34) (:wgts (-0.16999999999999993 11 12 1.34 5 6)))
;; 	      ((:crit crit-469) (:fitness 87.456) (:wgts (8 9 -3.4699999999999998 1 2 0.03)))
;; 	      ((:fitness 104.78907385791692) ((:crit crit-137) (:wgts (-0.16999999999999993 11 12 1.34 -2.63 0.03)))
;; 	       ((:crit crit-138) (:wgts (-0.9000000000000004 8 9 -3.4699999999999998 1 2))))))))

(defun add-tot-fit-to-crits (kid-crits train-set)
  "creates a sum of the fittness looped through the training set and adds it to the new critter"
  (let* ((fitted-kid-crits nil))
    (while kid-crits
      (let ((kid (pop kid-crits)))
	(let ((tot-fit (calc-crit-tot-fit kid train-set)))
	  (let ((fitted-kid-crit (cons (car kid)
				       (cons (list :fitness tot-fit)
					     (cdr kid)))))
	    (setq fitted-kid-crits (append (list fitted-kid-crit) fitted-kid-crits))))))
    fitted-kid-crits))

;; (add-tot-fit-to-crits '(((:crit 14) (:wgts (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)))
;; 			((:crit 15) (:wgts (19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36))))
;; 		      '(
;;        (1 (5 5 -53.5) 1)
;;        (2 (5 4 -18.8) 2)
;;        (3 (5 3 -6.9) 2)
;;        (4 (5 2 -15.6) 1)
;;        (5 (5 1 19.3) 3)
;;        (6 (5 0 0.0) 2)
;;        (7 (5 -1 -11.3) 1)))
;; (((:fitness 7.706742208750084) (:crit 14) (:wgts (1 2 3 4 5 6 7 8 9 10 11 12 ...))) ((:fitness 7.706742302257039) (:crit 15) (:wgts (19 20 21 22 23 24 25 26 27 28 29 30 ...))))


(defun calc-crit-tot-fit (rcritter train-set)
  "creates a sum of the fittness looped through the training set"
  (let ((tot-fit 0))
    (while train-set
      (let* ((next-tset-item (pop train-set)))
	;;(print (list :next-item next-tset-item))
	(let ((fit (calc-fitness next-tset-item rcritter)))
	  ;;(print (list :fit fit))
	  (setq tot-fit (+ fit tot-fit)))))
    tot-fit))

;; (calc-crit-tot-fit '((:crit 14) (:wgts (1 2 3 4 5 6))) ;;um this only works with 18 weight values..????
;; 		   '(
;;        (1 (5 5 -53.5) 1)
;;        (2 (5 4 -18.8) 2)
;;        (3 (5 3 -6.9) 2)
;;        (4 (5 2 -15.6) 1)
;;        (5 (5 1 19.3) 3)
;;        (6 (5 0 0.0) 2)
;;        (7 (5 -1 -11.3) 1)))
;; 7.126358139945285

(defun get-critters (rgen)
  "extracts the list of critters"
  (cadr (assoc :critters rgen)))


(defun get-max-fit (old-critters)
  "returns the critter that has the lowest fitness"
  (let* ((max 10000)
	 (max-critter nil))
    (while old-critters
      (let* ((old-critter (pop old-critters))
	     (fit-old-critter (cadr (assoc :fitness old-critter))))
	(if (> max fit-old-critter)
	    (setq max fit-old-critter
		  max-critter old-critter))))    
      max-critter))

;; (get-max-fit '(((:fitness 12) (:crit 14)) ((:fitness 1.0) (:crit 15))))
;; ((:fitness 1.0) (:crit 15))

(defun sort-old-critters(old-critters)
  "sorts the critters by fitness"
  (sort old-critters
	(lambda (a b)
	  (> (cadr (assoc :fitness a)) (cadr (assoc :fitness b))))))

;; (sort-old-critters '(((:fitness 4) (:crit 14)) ((:fitness 1) (:crit 15)) ((:fitness .0675) (:crit 15)) ((:fitness 23) (:crit 15))))
;; (((:fitness 0.0675) (:crit 15)) ((:fitness 1) (:crit 15)) ((:fitness 4) (:crit 14)) ((:fitness 23) (:crit 15)))

(defun split (list count)
  "splits a list in half"
  (let* ((split-list nil)
	 (first (cl-subseq list 0 count))
	 (second (nthcdr count list)))
    (setq split-list
	  (append (list first)
		  (list second)))
    split-list))

;; (split '(1 2 3 4) 2)
;; ((1 2) (3 4))

(defun split-crits-by-win-lose (old-critters)
  "splits the sorted list in half (winners/losers)"
  (let* ((sorted-old-critters (sort-old-critters old-critters))
	 (splitted-by-win-lose (split sorted-old-critters (/ (length sorted-old-critters) 2))))
    splitted-by-win-lose))
  
;; (split-crits-by-win-lose '(((:fitness 4) (:crit 14)) ((:fitness 1) (:crit 15)) ((:fitness .0675) (:crit 15)) ((:fitness 23) (:crit 15))))
;; ((((:fitness 0.0675) (:crit 15)) ((:fitness 1) (:crit 15))) (((:fitness 4) (:crit 14)) ((:fitness 23) (:crit 15))))

(defun get-winner-crits (winners-losers)
  "gets the winner critters"
  (cadr winners-losers))

;; (get-winner-crits '((((:fitness 0.0675) (:crit 15)) ((:fitness 1) (:crit 15))) (((:fitness 4) (:crit 14)) ((:fitness 23) (:crit 15)))))
;; (((:fitness 4) (:crit 14)) ((:fitness 23) (:crit 15)))


(defun get-loser-crits (winners-losers)
    "gets the loser critters"
  (car winners-losers))

;;  (get-loser-crits '((((:fitness 0.0675) (:crit 15)) ((:fitness 1) (:crit 15))) (((:fitness 4) (:crit 14)) ((:fitness 23) (:crit 15)))))
;; (((:fitness 0.0675) (:crit 15)) ((:fitness 1) (:crit 15)))

(defun swap (list elem1 elem2)
  "swaps two elements in a list in place"
  (let* ((temp (nth elem1 list)))
    (setf (nth elem1 list)
	  (nth elem2 list))
    (setf (nth elem2 list) temp)
    list))

;; (swap '(1 2 3) 1 2)
;; (1 3 2)

(defun shuffle (list)
  "shuffles a list at random"
  (cl-loop for i in (reverse (number-sequence 1 (1- (length list))))
           do (let* ((j (random (+ i 1))))
		(swap list i j)))
  list)

;; (shuffle '(3 45 3 2 1))
;; (45 2 3 3 1)
;; (3 3 1 45 2)
;; (1 3 2 45 3)


(defun mate-crits (winner-crits)
  "mates critters to produce new children"
  (let* ((out-count 0)
	 (in-count 1)
	 (new-children nil)
	 (shuffled-winners (shuffle winner-crits)))
    (while (< out-count (- (length shuffled-winners) 1))
	  (let* ((a-crit (nth out-count shuffled-winners)))
	    (let* ((b-crit (nth in-count shuffled-winners)))
	      (let* ((children (mate-two-critters a-crit b-crit)))
	  (setq in-count (+ 2 in-count))
	  (setq out-count (+ 2 out-count))
	  (setq new-children
		(append children new-children))))))
    new-children))

;;  (mate-crits '(((:crit 10) (:wgts (1 2 3))) ((:crit 15) (:wgts (4 5 6))) ((:crit 13) (:wgts (7 8 9))) ((:crit 11) (:wgts (10 11 12)))))

    
;;----------------------------------------------------- add-fit-to-crits ----
;; call add-fit-to-crit in a loop?
;;----------------------------------------------------- add-fit-to-crit ----
;;get-dist-twx-2-vecs (3d-class-x-vec 3d-class-estim) ;;(1, 0 ,0 calc-y-vec) --> find the dist by using get-dist -> the lower the better
;;)
(defun get-class-num (sample-x)
  "get class number (1,2,3) from sample-x"
  (let* ((sample-class (nth 2 sample-x)))
    sample-class))

;; (get-class-num '(3 (5 5 -53.5) 1))
;; 1

(defun class-num-to-vector(class-x)
  "converts class number to corressponding vector"
  (let* ((retv nil)
	 (class-num (get-class-num class-x))) 
    (cond 
     ((= 1 class-num)
      (setq retv '(1 0 0)))
     ((= 2 class-num)
      (setq retv '(0 1 0)))
     ((= 3 class-num)
      (setq retv '(0 0 1))))
    retv))

;;  (class-num-to-vector '(3 (5 5 -53.5) 3))
;; (0 0 1)

(defun get-critter-fm-sample-x (sample-x)
  "gets smaple-x vector from critter"
  (let* ((sample-crit (nth 1 sample-x)))
    sample-crit))

;; (get-critter-fm-sample-x '(3 (5 5 -53.5) 3))
;; (5 5 -53.5)

(defun calc-fitness (sample-x rcritter)
  "calculates the fitness of a critter"
  (let* ((x-vec (get-critter-fm-sample-x sample-x))
	 (3d-class-estim (run-critter x-vec rcritter))
	 (3d-class-x-vec (class-num-to-vector sample-x))
	 (fitness (get-dist-twx-2-vecs 3d-class-x-vec 3d-class-estim)))
    fitness))

;; (calc-fitness '(3 (5 5 -53.5) 3)
;;   	      '((:crit 14) (:wgts (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))))
;; 0.8660254037844386


;; convert class num to 3d-class-vec:
(defun add-fit-to-crit (sample-x rcritter)
 "Pre-pend key-val pair (:fitness <fitness>) to a critter's a-list."
 (let* ((fitness (calc-fitness sample-x rcritter)))
   (cons (list :fitness fitness)
	 rcritter)))

;; (add-fit-to-crit '(3 (5 5 -53.5) 3)
;; 		 '((:crit 14) (:wgts (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))))

;; ((:fitness 0.8660254037844386) (:crit 14) (:wgts (1 2 3 4 5 6 7 8 9 10 11 12 ...)))

;;----------------------------------------------------- mate-crits ----
;; call mate-two-critters in a loop?
;; do it enough times to make enough kid critters, collecting the kids as you go.
;;----------------------------------------------------- mate-two-critters ----
;; Critter format like ((:crit <id>) (:fitness <distsum>) (:wgts 1 2 3 ... ))
;; o- Foreach parent critter pair A,B:
;; o-- Pick 1 crossover point for DNA chromosome
;; -- (or pick 2 pts w/ wraparound ring) – so we get two parts
;; o-- Call 'em Left & Right parts of A's DNA (A1, A2); ditto for B's DNA (B1, B2)
;; o-- Form 2 kids by crossing over parents' DNA
;; -- (1 part from each): Kid1= (A1, B2); Kid2= (A2, B1)
;; o-- Apply mutation rate, if any, (about 1% of the time a genotype is modified)
;;
(defun mate-two-critters (rcrit-a rcrit-b)
 "Mate the two critters, returning a list of kid-critters."
 (let* ((wgts-a (get-critter-wgts rcrit-a))
	(wgts-b (get-critter-wgts rcrit-b))
	(wgts-a-len (length wgts-a))
	(wgts-b-len (length wgts-b))
	(min-wgt-len (if (< wgts-a-len wgts-b-len) wgts-a-len wgts-b-len))
	(crossover-pt (get-random-wgts-pt min-wgt-len)))
   (let ((a1-a2 (get-wgts-split-pair wgts-a crossover-pt)) ;; get a 2-elt X1-X2 list
	 (b1-b2 (get-wgts-split-pair wgts-b crossover-pt))) ;; ditto
     (let* ((k1-wgts (append (car a1-a2) (cadr b1-b2))) ;; make K1.wgts = A1+B2
	    (k2-wgts (append (cadr a1-a2) (car b1-b2))) ;; make K2.wgts = A2+B1
	    (k1-wgts-mut (mutate-wgts k1-wgts)) ;; Do mutations
	    (k2-wgts-mut (mutate-wgts k2-wgts))) ;; Do mutations
       (let ((kid-1 (make-kid-critter-w-wgts k1-wgts-mut)) ;; make new full critterusing these wgts
	     (kid-2 (make-kid-critter-w-wgts k2-wgts-mut))) ;; ditto
	 (list kid-1 kid-2))))))

;; (mate-two-critters '((:crit crit-32) (:wgts (1 2 3 4 5 -4.82 7)))
;; 		   '((:crit crit-33) (:wgts (1 2 2.3 4 5 -4.82 7))))
;; (((:crit crit-66) (:wgts (1 0.2699999999999996 3 4 5 -4.82 7)))
;;  ((:crit crit-67) (:wgts (2.6500000000000004 1 2 2.3 4 5 -4.82))))

(defun get-critter-wgts (rcritter)
  "get a critters weight list"
  (cadr (assoc :wgts rcritter)))

(defun get-wgts-split-pair (wgts crossover-pt)
  "splits a list based on the cross-over point"
  (let* ((a-2 (nthcdr crossover-pt wgts))
	 (rev-list (reverse wgts))
	 (rev-idx (- (length wgts) crossover-pt))
	 (a-1 (reverse (nthcdr rev-idx rev-list))))
    (list a-1 a-2)))

;; (get-wgts-split-pair '(1 2 3 4 5 6 7)
;; 		     4)
;; ((1 2 3 4) (5 6 7))

(defun get-random-wgt-in-range ()
  "gets a random weight to be added for mutation"
  (let* ((r (random))
	 (y (% r 1000))
	 (z (/ y 100.0))
	 (w (- z 5)))
    w))

(defun mutate-wgts (k-wgts)
  "adds the mutated weight to a list"
  (let* ((wgt-vec (vconcat k-wgts))
	 (random-idx (random (length k-wgts)))
	 (random-wgt (get-random-wgt-in-range))
	 (mut-wgt-vec (aset wgt-vec random-idx random-wgt))
	 (mut-wgt-list (append wgt-vec nil)))
    mut-wgt-list))

;; (mutate-wgts '(1 2 3 4 5 6 7))
;; (1 2 3 4 5 -4.82 7)
;; (1 2 3 4 2.92 6 7)
;; (4.18 2 3 4 5 6 7)

(defun make-kid-critter-w-wgts (k-wgts-mut)
  "adds a critter id and a weights list to a critter"
  (let ((new-kid-crit (list
		       (list :crit (gensym 'crit-))
		       (list :wgts k-wgts-mut))))
    new-kid-crit))

;; (make-kid-critter-w-wgts '(1 2 3 4 5 -4.82 7))
;; ((:crit crit-32) (:wgts (1 2 3 4 5 -4.82 7)))

;;----------------------------------------------------- get-random-wgts-pt ----
;; Return index, J, indicating [0..J] is 1st part & [J+1..end] is 2nd.
;;
 (defun get-random-wgts-pt (rlen)
 "gets random weight index"
 (+ 1 (random (- rlen 1))))
 
;; (get-random-wgts-pt 5)
;; 3
;; 4
;; 4
